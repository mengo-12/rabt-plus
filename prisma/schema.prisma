generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rating {
  id           String   @id @default(cuid())
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
  freelancerId String
  clientId     String
  client       User     @relation("ClientRatings", fields: [clientId], references: [id])
  freelancer   User     @relation("FreelancerRatings", fields: [freelancerId], references: [id])

  @@unique([freelancerId, clientId])
}

model User {
  id                String         @id @default(cuid())
  name              String
  email             String         @unique
  password          String
  role              Role
  phone             String?
  bio               String?
  description       String?
  avatar            String?
  cv                String?
  rating            Float?         @default(0)
  createdAt         DateTime       @default(now())
  projects          Project[]      @relation("ClientProjects")
  proposals         Proposal[]     @relation("FreelancerProposals")
  clientRatings     Rating[]       @relation("ClientRatings")
  freelancerRatings Rating[]       @relation("FreelancerRatings")
  ownedTeams        Team[]         @relation("OwnedTeams")
  teamMembers       TeamMember[]
  notifications     Notification[] // العلاقة مع Notifications
  messages          TeamMessage[]  @relation("UserMessages") // ✅ علاقة الرسائل
}

model Project {
  id          String     @id @default(cuid())
  title       String
  description String
  budget      Float?
  createdAt   DateTime   @default(now())
  clientId    String
  client      User       @relation("ClientProjects", fields: [clientId], references: [id])
  proposals   Proposal[]
}

model Proposal {
  id           String   @id @default(cuid())
  message      String
  price        Float
  createdAt    DateTime @default(now())
  projectId    String
  freelancerId String
  freelancer   User     @relation("FreelancerProposals", fields: [freelancerId], references: [id])
  project      Project  @relation(fields: [projectId], references: [id])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  rolesNeeded Json
  ownerId     String
  owner       User         @relation("OwnedTeams", fields: [ownerId], references: [id])
  members     TeamMember[]
  createdAt   DateTime     @default(now())
  messages    TeamMessage[] @relation("TeamMessages") // ✅ علاقة الرسائل
}

model TeamMember {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       String
  status     String   @default("pending") // pending, accepted, rejected
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TeamMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  senderId  String
  teamId    String
  sender    User     @relation(fields: [senderId], references: [id], name: "UserMessages")
  team      Team     @relation(fields: [teamId], references: [id], name: "TeamMessages")
}

model Notification {
  id          String             @id @default(cuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  title       String
  message     String
  type        NotificationType
  data        Json?
  isRead      Boolean            @default(false)
  createdAt   DateTime           @default(now())
}

enum Role {
  client
  freelancer
}

enum NotificationType {
  team_invitation
  project_update
  general
}

enum TeamMemberStatus {
  invited
  accepted
  rejected
}

